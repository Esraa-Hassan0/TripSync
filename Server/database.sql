
CREATE TABLE User 
(
    USER_ID SERIAL PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(200) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL
);

CREATE TABLE Admin
(
    ADMIN_ID SERIAL PRIMARY KEY AUTO_INCREMENT,
    Foreign Key (ADMIN_ID) REFERENCES User(USER_ID) ON DELETE CASCADE
);

CREATE TABLE Traveller
(
    TRAVELLER_ID SERIAL PRIMARY KEY AUTO_INCREMENT,
    Points INT DEFAULT 0 NOT NULL,
    NumberOfTrips INT DEFAULT 0 NOT NULL,
    Foreign Key (TRAVELLER_ID) REFERENCES User(USER_ID) ON DELETE CASCADE
);

CREATE TABLE NOtification
(
    NOTIFICATION_ID SERIAL PRIMARY KEY AUTO_INCREMENT,
    Date DATE NOT NULL,
    Time TIME NOT NULL,
    Content VARCHAR(400) NOT NULL,
    Status BOOLEAN DEFAULT FALSE NOT NULL,
    TRAVELLER_ID INT NOT NULL,
    Foreign Key (TRAVELLER_ID) REFERENCES Traveller(TRAVELLER_ID) ON DELETE CASCADE
);

CREATE TABLE Tickets 
(
    TICKET_ID SERIAL PRIMARY KEY AUTO_INCREMENT,
    Date DATE NOT NULL,
    Time TIME NOT NULL,
    Price FLOAT NOT NULL,
    TRAVELLER_ID INT NOT NULL,
    TrabelAgency_ID INT NOT NULL,
    Foreign Key (TRAVELLER_ID) REFERENCES Traveller(TRAVELLER_ID) ON DELETE CASCADE
    Foreign key (TravelAgency_ID) REFERENCES TravelAgency(TravelAgency_ID) ON DELETE CASCADE 
);

CREATE TABLE TravelAgency
(
    TravelAgency_ID SERIAL PRIMARY KEY AUTO_INCREMENT,
    Address VARCHAR(200) NOT NULL,
    Location VARCHAR(200) NOT NULL,
    PhoneNumber VARCHAR(200) NOT NULL,
    Email VARCHAR(200) NOT NULL,
    Rate FLOAT DEFAULT 0 NOT NULL,
    Description VARCHAR(400) NOT NULL,
    Country VARCHAR(200) NOT NULL,
    Foreign Key (TravelAgency_ID) REFERENCES User(USER_ID) ON DELETE CASCADE
);

CREATE TABLE Q&A
(
    QUESTION_ID SERIAL PRIMARY KEY AUTO_INCREMENT,
    Question VARCHAR(600) NOT NULL,
    Answer VARCHAR(600) NOT NULL,
    DATE DATE NOT NULL,
    TIME TIME NOT NULL,
);

CREATE TABLE Rewards
(
    REWARD_ID SERIAL PRIMARY KEY AUTO_INCREMENT,
    ADMIN_ID INT,
    PHOTO VARCHAR(200) NOT NULL,
    Description VARCHAR(400) NOT NULL,
    Points INT NOT NULL,
    PointsNeeded INT NOT NULL,
    Foreign Key (ADMIN_ID) REFERENCES Admin(ADMIN_ID) ON DELETE SET NULL 
);

CREATE TABLE POLICY
(
    POLICY_ID SERIAL PRIMARY KEY AUTO_INCREMENT,
    ADMIN_ID INT,
    Description VARCHAR(1000) NOT NULL,
    Title VARCHAR(200) NOT NULL,
    Foreign Key (ADMIN_ID) REFERENCES Admin(ADMIN_ID) ON DELETE SET NULL
);

CREATE TABLE Trip
(
    Trip_ID SERIAL PRIMARY KEY AUTO_INCREMENT,
    Description VARCHAR(400),
    Price FLOAT NOT NULL,
    MaxSeats INT NOT NULL,
    Destinition VARCHAR(200) NOT NULL,
    Rate FLOAT DEFAULT 0 NOT NULL,
    Duration VARCHAR(400) NOT NULL,
    StartLocation VARCHAR(200) NOT NULL,
    TravelAgency_ID INT NOT NULL,
    Foreign Key (TravelAgency_ID) REFERENCES TravelAgency(TravelAgency_ID) ON DELETE CASCADE
);

CREATE TABLE BLOGS
(
    BLOG_ID SERIAL PRIMARY KEY AUTO_INCREMENT,
    Title VARCHAR(200),
    Content VARCHAR(1000) NOT NULL,
    Date DATE NOT NULL,
    Time TIME NOT NULL,
    USER_ID INT NOT NULL,
    Foreign Key (USER_ID) REFERENCES User(USER_ID) ON DELETE CASCADE
);

CREATE TABLE PROFILE
(
    PROFILE_ID SERIAL PRIMARY KEY AUTO_INCREMENT,
    USER_ID INT NOT NULL, -- NOT SURE
    ProfileName VARCHAR(200) NOT NULL,
    ProfilePhoto VARCHAR(200) NOT NULL,
    Foreign Key (USER_ID) REFERENCES User(USER_ID) ON DELETE CASCADE
);

CREATE TABLE MESSAGE
(
    SENDER_ID INT NOT NULL,
    RECEIVER_ID INT NOT NULL,
    PRIMARY KEY (SENDER_ID, RECEIVER_ID),
    CONTENT VARCHAR(1000) NOT NULL,
    DATE DATE NOT NULL,
    TIME TIME NOT NULL,
    FOREIGN KEY (SENDER_ID) REFERENCES User(USER_ID) ON DELETE CASCADE,
    FOREIGN KEY (RECEIVER_ID) REFERENCES User(USER_ID) ON DELETE CASCADE
);

CREATE TABLE MAKE_QUESTION_ADMIN
(
    ADMIN_ID INT NOT NULL,
    QUESTION_ID INT PRIMARY KEY NOT NULL,
    FOREIGN KEY (ADMIN_ID ) REFERENCES Admin(ADMIN_ID) ON DELETE SET NULL
    FOREIGN KEY (QUESTION_ID) REFERENCES Q&A(QUESTION_ID) ON DELETE CASCADE
);

CREATE TABLE MAKE_QUESTION_AGENCY
(
    AGENCY_ID INT NOT NULL,
    QUESTION_ID INT PRIMARY KEY NOT NULL,
    FOREIGN KEY (AGENCY_ID ) REFERENCES TravelAgency(TravelAgency_ID) ON DELETE SET NULL
    FOREIGN KEY (QUESTION_ID) REFERENCES Q&A(QUESTION_ID) ON DELETE CASCADE
);

CREATE TABLE GETREWARD 
(
    REWARD_ID INT NOT NULL,
    TRAVELLER_ID INT NOT NULL,
    PRIMARY KEY (REWARD_ID, TRAVELLER_ID),
    FOREIGN KEY (REWARD_ID) REFERENCES Rewards(REWARD_ID) ON DELETE CASCADE,
    FOREIGN KEY (TRAVELLER_ID) REFERENCES Traveller(TRAVELLER_ID) ON DELETE CASCADE
);

CREATE TABLE PROMOTE
(
    TravelAgency_ID INT NOT NULL,
    Trip_ID INT PRIMARY KEY NOT NULL,
    EXPIRY_DATE DATE NOT NULL,
    PRECENTAGE FLOAT NOT NULL,
    FOREIGN KEY (TravelAgency_ID) REFERENCES TravelAgency(TravelAgency_ID) ON DELETE CASCADE,
    FOREIGN KEY (Trip_ID) REFERENCES Trip(Trip_ID) ON DELETE CASCADE
);

CREATE TABLE REVIEW
(
    TRAVELLER_ID INT NOT NULL,
    TRAVEL_AGENCY_ID INT NOT NULL,
    PRIMARY KEY (TRAVELLER_ID, TRAVEL_AGENCY_ID),
    RATE FLOAT NOT NULL,
    REVIEW VARCHAR(1000) ,
    DATE DATE NOT NULL,
    FOREIGN KEY (TRAVELLER_ID) REFERENCES Traveller(TRAVELLER_ID) ON DELETE CASCADE,
    FOREIGN KEY (TRAVEL_AGENCY_ID) REFERENCES TravelAgency(TravelAgency_ID) ON DELETE CASCADE
);

CREATE TABLE REPORT
(
    TRAVELLER_ID INT NOT NULL,
    TRAVEL_AGENCY_ID INT NOT NULL,
    PRIMARY KEY (TRAVELLER_ID, TRAVEL_AGENCY_ID),
    DESCRIPTION VARCHAR(1000) NOT NULL,
    DATE DATE NOT NULL,
    FOREIGN KEY (TRAVELLER_ID) REFERENCES Traveller(TRAVELLER_ID) ON DELETE CASCADE,
    FOREIGN KEY (TRAVEL_AGENCY_ID) REFERENCES TravelAgency(TravelAgency_ID) ON DELETE CASCADE
)

CREATE TABLE REVIEWED_BY 
(
    TRAVELLER_ID INT NOT NULL,
    TRIP_ID INT NOT NULL,
    PRIMARY KEY (TRAVELLER_ID, TRIP_ID),
    FOREIGN KEY (TRAVELLER_ID) REFERENCES Traveller(TRAVELLER_ID) ON DELETE CASCADE,
    FOREIGN KEY (TRIP_ID) REFERENCES Trip(Trip_ID) ON DELETE CASCADE
    RATE FLOAT NOT NULL,
    REVIEW VARCHAR(1000),
    DATE DATE NOT NULL
);

CREATE TABLE TRIP_PHOTOS
(
    TRIP_ID INT NOT NULL,
    PHOTO VARCHAR(200) NOT NULL,
    PRIMARY KEY (TRIP_ID, PHOTO),
    FOREIGN KEY (TRIP_ID) REFERENCES Trip(Trip_ID) ON DELETE CASCADE
);